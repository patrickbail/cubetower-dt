#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (-0.06743317522904224, 0.7088869820253663, 0.7828939191938018)
                double3 target = (6.6270680859065045, -1.1910789503738577, 0.46618822529077925)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./cube_setup.usd"
            dictionary muteness = {
            }
        }
        int refinementOverrideImplVersion = 0
        dictionary renderSettings = {
            double "rtx:sceneDb:ambientLightIntensity" = 0.7999999821186066
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Z"
)

def Xform "World"
{
    def Xform "GroundPlane"
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Mesh "CollisionMesh"
        {
            uniform bool doubleSided = 0
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            rel material:binding = </World/Looks/GroundPlane> (
                bindMaterialAs = "weakerThanDescendants"
            )
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
            point3f[] points = [(-25, -25, 0), (25, -25, 0), (25, 25, 0), (-25, 25, 0)]
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "varying"
            )
        }

        def Plane "CollisionPlane" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            rel material:binding = None (
                bindMaterialAs = "weakerThanDescendants"
            )
            uniform token purpose = "guide"
        }
    }

    def SphereLight "SphereLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float intensity = 30000
        float radius = 0.5
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        token visibility = "invisible"
        quatd xformOp:orient = (0.5000000000000001, 0.5, 0.49999999999999994, 0.5)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 3.0000000447034836)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Scope "Looks"
    {
        def Material "Oak"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Oak/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Oak/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Oak/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @omniverse://localhost/NVIDIA/Materials/Base/Wood/Oak.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "Oak"
                float inputs:ao_to_diffuse = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "AO"
                    displayName = "AO to Diffuse"
                    doc = "Controls the amount of ambient occlusion multiplied into the diffuse color channel"
                    hidden = false
                )
                float inputs:bump_factor = 1 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Strength"
                    doc = "Strength of normal map."
                    hidden = false
                )
                float inputs:detail_texture_rotate = 0 (
                    customData = {
                        float default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Detail Texture Rotate"
                    doc = "Rotates angle of the detail texture in degrees."
                    hidden = false
                )
                float2 inputs:detail_texture_scale = (1, 1) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Detail Texture Scale"
                    doc = "Larger numbers increase the size of the detail texture"
                    hidden = false
                )
                float2 inputs:detail_texture_translate = (0, 0) (
                    customData = {
                        float2 default = (0, 0)
                    }
                    displayGroup = "UV"
                    displayName = "Detail Texture Translate"
                    doc = "Controls the position of the detail texture."
                    hidden = false
                )
                asset inputs:diffuse_texture = @omniverse://localhost/NVIDIA/Materials/Base/Wood/Oak/Oak_BaseColor.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @omniverse://localhost/NVIDIA/Materials/Base/Wood/Oak/Oak_BaseColor.png@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                float inputs:emissive_intensity = 40 (
                    customData = {
                        float default = 40
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                bool inputs:enable_opacity = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                bool inputs:enable_ORM_texture = 1 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Enable ORM Texture"
                    doc = "When True the ORM texture will be used to extract the Occlusion, Roughness and Metallic Map"
                    hidden = false
                )
                bool inputs:excludeFromWhiteMode = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Exclude from White Mode"
                    hidden = false
                )
                bool inputs:flip_tangent_v = 1 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @omniverse://localhost/NVIDIA/Materials/Base/Wood/Oak/Oak_N.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @omniverse://localhost/NVIDIA/Materials/Base/Wood/Oak/Oak_N.png@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                bool inputs:project_uvw = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Enable Project UVW Coordinates"
                    doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                    hidden = false
                )
                float inputs:texture_rotate = 0 (
                    customData = {
                        float default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Texture Rotate"
                    doc = "Rotates angle of texture in degrees."
                    hidden = false
                )
                float2 inputs:texture_scale = (1, 1) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Texture Scale"
                    doc = "Larger number increases size of texture."
                    hidden = false
                )
                float2 inputs:texture_translate = (0, 0) (
                    customData = {
                        float2 default = (0, 0)
                    }
                    displayGroup = "UV"
                    displayName = "Texture Translate"
                    doc = "Controls position of texture."
                    hidden = false
                )
                int inputs:uv_space_index = 0 (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 3
                            int min = 0
                        }
                    }
                    displayGroup = "UV"
                    displayName = "UV Space Index"
                    doc = "UV Space Index."
                    hidden = false
                )
                bool inputs:world_or_object = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Enable World Space"
                    doc = "When set to 'true' uses world space for projection, when 'false' object space is used"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "Styrofoam" (
            instanceable = false
        )
        {
            token outputs:mdl:displacement.connect = </World/Looks/Styrofoam/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Styrofoam/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Styrofoam/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @omniverse://localhost/NVIDIA/Materials/2023_1/vMaterials_2/Plastic/Styrofoam.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "Styrofoam"
                bool inputs:across_materials = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Round Corners"
                    displayName = "Across Materials"
                    doc = "Applies the round corner effect across different materials when enabled"
                    hidden = false
                )
                float inputs:brightness = -2.2 (
                    customData = {
                        float default = 0.7
                    }
                    displayGroup = "Appearance"
                    displayName = "Brightness"
                    doc = "Adjusts the lightness of the material"
                    hidden = false
                )
                bool inputs:enable_round_corners = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Round Corners"
                    displayName = "Round Corners"
                    doc = "Enables the round cornwer effect. Comes at a slight performance cost as additional raytracing calls are rquired to evaluate the round corner effect"
                    hidden = false
                )
                float inputs:roughness = 2.5 (
                    customData = {
                        float default = 0.7
                    }
                    displayGroup = "Appearance"
                    displayName = "Roughness"
                    doc = "Higher roughness values lead to bigger highlights and blurrier reflections."
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "Mirror"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Mirror/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Mirror/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Mirror/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @omniverse://localhost/NVIDIA/Materials/Base/Glass/Mirror.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "Mirror"
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "Clear_Glass"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Clear_Glass/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Clear_Glass/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Clear_Glass/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @omniverse://localhost/NVIDIA/Materials/Base/Glass/Clear_Glass.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "Clear_Glass"
                float inputs:depth = 0.001 (
                    customData = {
                        float default = 0.001
                        dictionary range = {
                            float max = 1000
                            float min = 0
                        }
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Color"
                    displayName = "Volume Absorption Scale"
                    doc = "Controls how much light is absorbed through the surface"
                    hidden = false
                )
                float inputs:frosting_roughness = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Roughness"
                    displayName = "Glass Roughness"
                    doc = "Sets the roughness of the glass material "
                    hidden = false
                )
                color3f inputs:glass_color = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Color"
                    displayName = "Glass Color"
                    doc = "Sets the color of the glass"
                    hidden = false
                )
                float inputs:glass_ior = 1.52 (
                    customData = {
                        float default = 1.52
                        dictionary soft_range = {
                            float max = 4
                            float min = 1
                        }
                    }
                    displayGroup = "Refraction"
                    displayName = "Glass IOR"
                    doc = "Sets IOR of the glass material "
                    hidden = false
                )
                bool inputs:project_uvw = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Enable Project UVW Coordinates"
                    doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                    hidden = false
                )
                color3f inputs:reflection_color = (0.33043134, 0.48945147, 0.3706897) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Reflection"
                    displayName = "Reflection Color"
                    hidden = false
                )
                asset inputs:roughness_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Roughness"
                    displayName = "Roughness Texture"
                    doc = "The roughness texture"
                    hidden = false
                )
                float inputs:roughness_texture_influence = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Roughness"
                    displayName = "Roughness Texture Influence"
                    hidden = false
                )
                bool inputs:thin_walled = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Refraction"
                    displayName = "Thin Walled"
                    doc = "When enabled, the material is considered thin-walled. Use this, when you have glass surfaces that are modeled with a single plane"
                    hidden = false
                )
                bool inputs:world_or_object = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Enable World Space"
                    doc = "When set to 'true' uses world space for projection, when 'false' object space is used"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "Glass_Cube_Floor"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Glass_Cube_Floor/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Glass_Cube_Floor/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Glass_Cube_Floor/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.9915612, 0.91660064, 0.81165767) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "GroundPlane"
        {
            token outputs:mdl:displacement.connect = </World/Looks/GroundPlane/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/GroundPlane/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/GroundPlane/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.23921569, 0.23529412, 0.21176471) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "Warning_strip"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Warning_strip/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Warning_strip/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Warning_strip/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:albedo_add = 0 (
                    customData = {
                        float default = 0
                        dictionary soft_range = {
                            float max = 1
                            float min = -1
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Add"
                    doc = "Adds a constant value to the diffuse color "
                    hidden = false
                )
                float inputs:albedo_brightness = 1 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Brightness"
                    doc = "Multiplier for the diffuse color "
                    hidden = false
                )
                float inputs:albedo_desaturation = 0 (
                    customData = {
                        float default = 0
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Desaturation"
                    doc = "Desaturates the diffuse color"
                    hidden = false
                )
                float inputs:detail_texture_rotate = 0 (
                    customData = {
                        float default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Detail Texture Rotate"
                    doc = "Rotates angle of the detail texture in degrees."
                    hidden = false
                )
                float2 inputs:detail_texture_translate = (0, 0) (
                    customData = {
                        float2 default = (0, 0)
                    }
                    displayGroup = "UV"
                    displayName = "Detail Texture Translate"
                    doc = "Controls the position of the detail texture."
                    hidden = false
                )
                asset inputs:diffuse_texture = @./warning_strip.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                bool inputs:project_uvw = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Enable Project UVW Coordinates"
                    doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                    hidden = false
                )
                float inputs:texture_rotate = 0 (
                    customData = {
                        float default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Texture Rotate"
                    doc = "Rotates angle of texture in degrees."
                    hidden = false
                )
                float2 inputs:texture_scale = (1.6, -12.6) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Texture Scale"
                    doc = "Larger number increases size of texture."
                    hidden = false
                )
                float2 inputs:texture_translate = (0.48, 0.5) (
                    customData = {
                        float2 default = (0, 0)
                    }
                    displayGroup = "UV"
                    displayName = "Texture Translate"
                    doc = "Controls position of texture."
                    hidden = false
                )
                int inputs:uv_space_index = 0 (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 3
                            int min = 0
                        }
                    }
                    displayGroup = "UV"
                    displayName = "UV Space Index"
                    doc = "UV Space Index."
                    hidden = false
                )
                bool inputs:world_or_object = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Enable World Space"
                    doc = "When set to 'true' uses world space for projection, when 'false' object space is used"
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "Paper"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Paper/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Paper/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Paper/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @omniverse://localhost/NVIDIA/Materials/Base/Wall_Board/Paper.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "Paper"
                float inputs:albedo_add = 0 (
                    customData = {
                        float default = 0
                        dictionary soft_range = {
                            float max = 1
                            float min = -1
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Add"
                    doc = "Adds a constant value to the diffuse color "
                    hidden = false
                )
                float inputs:albedo_brightness = 1 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Brightness"
                    doc = "Multiplier for the diffuse color "
                    hidden = false
                )
                float inputs:albedo_desaturation = 0 (
                    customData = {
                        float default = 0
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Desaturation"
                    doc = "Desaturates the diffuse color"
                    hidden = false
                )
                asset inputs:diffuse_texture = @omniverse://localhost/NVIDIA/Materials/Base/Wall_Board/Paper/Paper_BaseColor.png@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @omniverse://localhost/NVIDIA/Materials/Base/Wall_Board/Paper/Paper_BaseColor.png@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (0.56540084, 0.5179858, 0.438961) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                bool inputs:project_uvw = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Enable Project UVW Coordinates"
                    doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                    hidden = false
                )
                bool inputs:world_or_object = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Enable World Space"
                    doc = "When set to 'true' uses world space for projection, when 'false' object space is used"
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "Gypsum"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Gypsum/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Gypsum/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Gypsum/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @omniverse://localhost/NVIDIA/Materials/Base/Wall_Board/Gypsum.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "Gypsum"
                asset inputs:diffuse_texture = @omniverse://localhost/NVIDIA/Materials/Base/Wall_Board/Gypsum/Gypsum_BaseColor.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @omniverse://localhost/NVIDIA/Materials/Base/Wall_Board/Gypsum/Gypsum_BaseColor.png@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (0.8156863, 0.8392157, 0.8392157) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                bool inputs:project_uvw = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Enable Project UVW Coordinates"
                    doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                    hidden = false
                )
                bool inputs:world_or_object = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Enable World Space"
                    doc = "When set to 'true' uses world space for projection, when 'false' object space is used"
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "PaperCeiling"
        {
            token outputs:mdl:displacement.connect = </World/Looks/PaperCeiling/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/PaperCeiling/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/PaperCeiling/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @omniverse://localhost/NVIDIA/Materials/Base/Wall_Board/Paper.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "Paper"
                float inputs:albedo_add = 0 (
                    customData = {
                        float default = 0
                        dictionary soft_range = {
                            float max = 1
                            float min = -1
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Add"
                    doc = "Adds a constant value to the diffuse color "
                    hidden = false
                )
                float inputs:albedo_brightness = 1 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Brightness"
                    doc = "Multiplier for the diffuse color "
                    hidden = false
                )
                float inputs:albedo_desaturation = 0 (
                    customData = {
                        float default = 0
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Desaturation"
                    doc = "Desaturates the diffuse color"
                    hidden = false
                )
                asset inputs:diffuse_texture = @omniverse://localhost/NVIDIA/Materials/Base/Wall_Board/Paper/Paper_BaseColor.png@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @omniverse://localhost/NVIDIA/Materials/Base/Wall_Board/Paper/Paper_BaseColor.png@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (0.24050635, 0.21134347, 0.14816004) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                bool inputs:project_uvw = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Enable Project UVW Coordinates"
                    doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                    hidden = false
                )
                bool inputs:world_or_object = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Enable World Space"
                    doc = "When set to 'true' uses world space for projection, when 'false' object space is used"
                    hidden = false
                )
                token outputs:out
            }
        }
    }

    def Xform "CubeTower"
    {
        quatd xformOp:orient = (0.7071067811865476, 0, 0, -0.7071067811865476)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (2.5, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "TopCube"
        {
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0.75)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Xform "WoodenStructure1"
            {
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Cube "WoodCube"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-0.1349999999999998, 0.105, 0.16500000000000004)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_01"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-0.105, 0.135, 0.16500000000000004)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_02"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-0.105, 0.105, 0.16500000000000004)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_03"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-0.105, 0.075, 0.16500000000000004)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_04"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-0.075, 0.075, 0.16500000000000004)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_05"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-0.135, 0.075, 0.16500000000000004)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_06"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-0.075, 0.135, 0.16500000000000004)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_07"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-0.075, 0.105, 0.16500000000000004)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_08"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-0.105, 0.105, 0.195)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_09"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-0.075, 0.105, 0.195)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_10"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-0.075, 0.135, 0.195)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_11"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-0.075, 0.075, 0.195)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_12"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-0.105, 0.075, 0.195)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_13"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-0.135, 0.075, 0.195)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_14"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-0.075, 0.075, 0.225)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_15"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-0.105, 0.075, 0.225)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_16"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-0.075, 0.105, 0.225)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_17"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-0.075, 0.075, 0.255)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }

            def Xform "WoodenStructure2"
            {
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Cube "WoodCube_18"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0.105, -0.135, 0.16500000000000004)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_19"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0.135, -0.105, 0.16500000000000004)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_20"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0.105, -0.105, 0.16500000000000004)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_21"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0.135, -0.075, 0.16500000000000004)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_22"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0.075, -0.135, 0.16500000000000004)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_23"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0.075, -0.105, 0.16500000000000004)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_24"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0.105, -0.075, 0.16500000000000004)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_25"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0.105, -0.105, 0.195)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_26"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0.135, -0.075, 0.195)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_27"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0.075, -0.135, 0.195)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_28"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0.135, -0.075, 0.225)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "WoodCube_29"
                {
                    float3[] extent = [(-0.015, -0.015, -0.015), (0.015, 0.015, 0.015)]
                    rel material:binding = </World/Looks/Oak> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.03
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0.075, -0.135, 0.225)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }

            def Xform "Heptahedron" (
                kind = "component"
            )
            {
                token visibility = "inherited"
                float3 xformOp:rotateXYZ = (0, 90, 180)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Mesh "HeptahedronMesh"
                {
                    int[] faceVertexCounts = [4, 4, 4, 5, 5, 5, 3]
                    int[] faceVertexIndices = [0, 1, 2, 3, 0, 1, 5, 4, 1, 2, 6, 5, 3, 2, 6, 7, 9, 0, 3, 9, 8, 4, 4, 8, 7, 6, 5, 8, 7, 9]
                    rel material:binding = </World/Looks/Styrofoam> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    point3f[] points = [(-0.15, 0.15, -0.15), (-0.15, -0.15, -0.15), (0.15, -0.15, -0.15), (0.15, 0.15, -0.15), (-0.15, 0.15, 0.15), (-0.15, -0.15, 0.15), (0.15, -0.15, 0.15), (0.15, 0.095, 0.15), (0.095, 0.15, 0.15), (0.15, 0.15, 0.11)]
                    uniform token subdivisionScheme = "none"
                }
            }
        }

        def Xform "Heptahedron" (
            kind = "component"
        )
        {
            quatf xformOp:orient = (-1.6081226e-16, 0, 0, 1)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 3.061616997868383e-16, 0.45)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Mesh "HeptahedronMesh"
            {
                int[] faceVertexCounts = [4, 4, 4, 5, 5, 5, 3]
                int[] faceVertexIndices = [0, 1, 2, 3, 0, 1, 5, 4, 1, 2, 6, 5, 3, 2, 6, 7, 9, 0, 3, 9, 8, 4, 4, 8, 7, 6, 5, 8, 7, 9]
                rel material:binding = </World/Looks/Mirror> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                point3f[] points = [(-0.15, 0.15, -0.15), (-0.15, -0.15, -0.15), (0.15, -0.15, -0.15), (0.15, 0.15, -0.15), (-0.15, 0.15, 0.15), (-0.15, -0.15, 0.15), (0.15, -0.15, 0.15), (0.15, 0.095, 0.15), (0.11, 0.15, 0.15), (0.15, 0.15, 0.095)]
                uniform token subdivisionScheme = "none"
            }
        }

        def Xform "Glass_Cube"
        {
            quatd xformOp:orient = (-1.6081226496766366e-16, 0, 0, 1)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 3.061616997868383e-16, 0.15)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Cube "Glass_Wall"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Clear_Glass> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.004000000189989805, 0.30000001192092896, 0.30000001192092896)
                double3 xformOp:translate = (0.15, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "Glass_Wall_01"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Clear_Glass> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.004000000189989805, 0.30000001192092896, 0.30000001192092896)
                double3 xformOp:translate = (-0.15, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "Glass_Wall_02"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Clear_Glass> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (0.7071067811865476, 0, 0, 0.7071067811865476)
                double3 xformOp:scale = (0.004000000189989805, 0.292, 0.30000001192092896)
                double3 xformOp:translate = (0, 0.15, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "Glass_Wall_03"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Clear_Glass> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (0.7071067811865476, 0, 0, 0.7071067811865476)
                double3 xformOp:scale = (0.004000000189989805, 0.292, 0.30000001192092896)
                double3 xformOp:translate = (0, -0.15, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "Glass_Cube_Floor"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Glass_Cube_Floor> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (0.7071067811865476, 0, 0.7071067811865476, 0)
                double3 xformOp:scale = (0.004000000189989805, 0.30000001192092896, 0.30000001192092896)
                double3 xformOp:translate = (0, 0, -0.15)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }
    }

    def Cube "Warning_Strip"
    {
        float3[] extent = [(-0.15, -0.15, -0.15), (0.15, 0.15, 0.15)]
        rel material:binding = </World/Looks/Warning_strip> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.3
        quatd xformOp:orient = (0.7071067811865475, 0, 0, -0.7071067811865476)
        double3 xformOp:scale = (0.20000000298023224, 11.199999809265137, 0.0010000000474974513)
        double3 xformOp:translate = (1.8000000268220901, 3.1879841807290794e-29, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Xform "BackPartitionWall"
    {
        quatd xformOp:orient = (6.123233995736766e-17, 0, 0, -1)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (3.075, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "Frame"
        {
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, -0.705, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Cube "VerticalOakBorder"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Oak> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.017, 1.4, 0.036)
                double3 xformOp:translate = (0, 0, 0.018)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "HorizontalOakBorder"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Oak> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (0.4999999999999999, 0.5000000000000001, 0.5000000000000001, 0.5000000000000001)
                double3 xformOp:scale = (0.017, 1.5, 0.036)
                double3 xformOp:translate = (0, 0.7, 0.75)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "HorizontalOakBorder_01"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Oak> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (0.4999999999999999, 0.5000000000000001, 0.5000000000000001, 0.5000000000000001)
                double3 xformOp:scale = (0.017, 1.5, 0.036)
                double3 xformOp:translate = (0, -0.7, 0.75)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "VerticalOakBorder_01"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Oak> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.017, 1.4, 0.036)
                double3 xformOp:translate = (0, 0, 1.5)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "PaperWall"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Paper> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.0010000000474974513, 0.699999988079071, 1)
                double3 xformOp:translate = (0.02, 0.35, 0.49999999999998607)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "PaperWall_01"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Paper> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.0010000000474974513, 0.699999988079071, 1)
                double3 xformOp:translate = (0.02, -0.35, 0.49999999999998607)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }

        def Xform "Frame_01"
        {
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0.705, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Cube "VerticalOakBorder"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Oak> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.017, 1.4, 0.036)
                double3 xformOp:translate = (0, 0, 0.018)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "HorizontalOakBorder"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Oak> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (0.4999999999999999, 0.5000000000000001, 0.5000000000000001, 0.5000000000000001)
                double3 xformOp:scale = (0.017, 1.5, 0.036)
                double3 xformOp:translate = (0, 0.7, 0.75)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "HorizontalOakBorder_01"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Oak> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (0.4999999999999999, 0.5000000000000001, 0.5000000000000001, 0.5000000000000001)
                double3 xformOp:scale = (0.017, 1.5, 0.036)
                double3 xformOp:translate = (0, -0.7, 0.75)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "VerticalOakBorder_01"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Oak> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.017, 1.4, 0.036)
                double3 xformOp:translate = (0, 0, 1.5)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "PaperWall"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Paper> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.0010000000474974513, 0.699999988079071, 1)
                double3 xformOp:translate = (0.02, 0.35, 0.49999999999998607)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "PaperWall_01"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Paper> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.0010000000474974513, 0.699999988079071, 1)
                double3 xformOp:translate = (0.02, -0.35, 0.49999999999998607)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }
    }

    def Xform "RightPartitionWall"
    {
        quatd xformOp:orient = (0.7071067811865476, 0, 0, -0.7071067811865476)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (1.65, -1.415, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "Frame"
        {
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, -0.705, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Cube "VerticalOakBorder"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Oak> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.017, 1.4, 0.036)
                double3 xformOp:translate = (0, 0, 0.018)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "HorizontalOakBorder"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Oak> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (0.4999999999999999, 0.5000000000000001, 0.5000000000000001, 0.5000000000000001)
                double3 xformOp:scale = (0.017, 1.5, 0.036)
                double3 xformOp:translate = (0, 0.7, 0.75)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "HorizontalOakBorder_01"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Oak> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (0.4999999999999999, 0.5000000000000001, 0.5000000000000001, 0.5000000000000001)
                double3 xformOp:scale = (0.017, 1.5, 0.036)
                double3 xformOp:translate = (0, -0.7, 0.75)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "VerticalOakBorder_01"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Oak> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.017, 1.4, 0.036)
                double3 xformOp:translate = (0, 0, 1.5)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "PaperWall"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Paper> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                token visibility = "invisible"
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.0010000000474974513, 0.699999988079071, 1)
                double3 xformOp:translate = (0.02, 0.35, 0.49999999999998607)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "PaperWall_01"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Paper> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                token visibility = "invisible"
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.0010000000474974513, 0.699999988079071, 1)
                double3 xformOp:translate = (0.02, -0.35, 0.49999999999998607)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }

        def Xform "Frame_01"
        {
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0.705, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Cube "VerticalOakBorder"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Oak> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.017, 1.4, 0.036)
                double3 xformOp:translate = (0, 0, 0.018)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "HorizontalOakBorder"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Oak> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (0.4999999999999999, 0.5000000000000001, 0.5000000000000001, 0.5000000000000001)
                double3 xformOp:scale = (0.017, 1.5, 0.036)
                double3 xformOp:translate = (0, 0.7, 0.75)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "HorizontalOakBorder_01"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Oak> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (0.4999999999999999, 0.5000000000000001, 0.5000000000000001, 0.5000000000000001)
                double3 xformOp:scale = (0.017, 1.5, 0.036)
                double3 xformOp:translate = (0, -0.7, 0.75)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "VerticalOakBorder_01"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Oak> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.017, 1.4, 0.036)
                double3 xformOp:translate = (0, 0, 1.5)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "PaperWall"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Paper> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                token visibility = "invisible"
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.0010000000474974513, 0.699999988079071, 1)
                double3 xformOp:translate = (0.02, 0.35, 0.49999999999998607)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "PaperWall_01"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Paper> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                token visibility = "invisible"
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.0010000000474974513, 0.699999988079071, 1)
                double3 xformOp:translate = (0.02, -0.35, 0.49999999999998607)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }

        def Cube "Wall"
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/Gypsum> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 1
            quatd xformOp:orient = (0.7071067811865475, 0, 0, 0.7071067811865476)
            double3 xformOp:scale = (2.9000000953674316, 0.0010000000474974513, 1.5000000223517418)
            double3 xformOp:translate = (3.9968028886505635e-15, 0.05, 0.75)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "LeftPartitionWall"
    {
        quatd xformOp:orient = (0.7071067811865476, 0, 0, -0.7071067811865476)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (1.65, 1.415, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "Frame"
        {
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, -0.705, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Cube "VerticalOakBorder"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Oak> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.017, 1.4, 0.036)
                double3 xformOp:translate = (0, 0, 0.018)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "HorizontalOakBorder"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Oak> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (0.4999999999999999, 0.5000000000000001, 0.5000000000000001, 0.5000000000000001)
                double3 xformOp:scale = (0.017, 1.5, 0.036)
                double3 xformOp:translate = (0, 0.7, 0.75)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "HorizontalOakBorder_01"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Oak> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (0.4999999999999999, 0.5000000000000001, 0.5000000000000001, 0.5000000000000001)
                double3 xformOp:scale = (0.017, 1.5, 0.036)
                double3 xformOp:translate = (0, -0.7, 0.75)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "VerticalOakBorder_01"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Oak> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.017, 1.4, 0.036)
                double3 xformOp:translate = (0, 0, 1.5)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "PaperWall"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Paper> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.0010000000474974513, 0.699999988079071, 1)
                double3 xformOp:translate = (0.02, 0.35, 0.49999999999998607)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "PaperWall_01"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Paper> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.0010000000474974513, 0.699999988079071, 1)
                double3 xformOp:translate = (0.02, -0.35, 0.49999999999998607)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }

        def Xform "Frame_01"
        {
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0.705, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Cube "VerticalOakBorder"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Oak> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.017, 1.4, 0.036)
                double3 xformOp:translate = (0, 0, 0.018)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "HorizontalOakBorder"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Oak> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (0.4999999999999999, 0.5000000000000001, 0.5000000000000001, 0.5000000000000001)
                double3 xformOp:scale = (0.017, 1.5, 0.036)
                double3 xformOp:translate = (0, 0.7, 0.75)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "HorizontalOakBorder_01"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Oak> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (0.4999999999999999, 0.5000000000000001, 0.5000000000000001, 0.5000000000000001)
                double3 xformOp:scale = (0.017, 1.5, 0.036)
                double3 xformOp:translate = (0, -0.7, 0.75)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "VerticalOakBorder_01"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Oak> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.017, 1.4, 0.036)
                double3 xformOp:translate = (0, 0, 1.5)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "PaperWall"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Paper> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.0010000000474974513, 0.699999988079071, 1)
                double3 xformOp:translate = (0.02, 0.35, 0.49999999999998607)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cube "PaperWall_01"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </World/Looks/Paper> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.0010000000474974513, 0.699999988079071, 1)
                double3 xformOp:translate = (0.02, -0.35, 0.49999999999998607)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }
    }

    def Xform "PaperCeiling"
    {
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (2.1, 0, 1.52)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "TopCeiling"
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/PaperCeiling> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (2, 2.9, 0.001)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cube "RightCeiling"
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/PaperCeiling> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (2, 0.0010000000474974513, 0.5)
            double3 xformOp:translate = (0, -1.41, -0.25)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cube "LeftCeiling"
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/PaperCeiling> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (2, 0.0010000000474974513, 0.7000000104308128)
            double3 xformOp:translate = (0, 1.41, -0.35)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Cube "Lamp"
    {
        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
        rel material:binding = </World/Looks/Gypsum> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 1
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (0.019999999552965164, 0.8999999761581421, 0.019999999552965164)
        double3 xformOp:translate = (3.0159119866682125, -0.9458641545477456, 0.010000000000012058)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RectLight "RectLight" (
            prepend apiSchemas = ["ShapingAPI"]
        )
        {
            color3f color = (0.99215686, 0.78431374, 0.5529412)
            float exposure = 0
            float height = 0.9
            float intensity = 296000
            float shaping:cone:angle = 180
            float shaping:cone:softness
            float shaping:focus
            color3f shaping:focusTint
            asset shaping:ies:file
            token visibility = "invisible"
            float width = 0.9
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, -1, 1)
            double3 xformOp:translate = (0, 0, 1.0000000149011612)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def CylinderLight "CylinderLight" (
            prepend apiSchemas = ["ShapingAPI"]
        )
        {
            color3f color = (0.99215686, 0.78431374, 0.5529412)
            float intensity = 296000
            float length = 0.9
            float radius = 0.02
            float shaping:cone:angle = 180
            float shaping:cone:softness
            float shaping:focus
            color3f shaping:focusTint
            asset shaping:ies:file
            token visibility = "invisible"
            quatd xformOp:orient = (0.49999999999999994, 0.5000000000000003, 0.5000000000000003, 0.4999999999999997)
            double3 xformOp:scale = (1.1111111640930176, 50, 50)
            double3 xformOp:translate = (0, 0, 0.9000000134110451)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def DiskLight "DiskLight" (
            prepend apiSchemas = ["ShapingAPI"]
        )
        {
            color3f color = (0.9915612, 0.7849846, 0.5522619)
            float exposure = 0
            float intensity = 296000
            float radius = 0.45
            float shaping:cone:angle = 180
            float shaping:cone:softness
            float shaping:focus
            color3f shaping:focusTint
            asset shaping:ies:file
            token visibility = "inherited"
            quatd xformOp:orient = (6.123233995736766e-17, -1, 0, 0)
            double3 xformOp:scale = (5, 1.1111111640930176, 50)
            double3 xformOp:translate = (0, 0, 0.800000011920929)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }
}

over "Render" (
    hide_in_stage_window = true
)
{
}

